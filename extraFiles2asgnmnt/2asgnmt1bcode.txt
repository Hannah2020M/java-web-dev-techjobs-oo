2asgnmt1bcode
C:\Users\h19sl\Documents\asgnment2LC2022may12\extraFiles2asgnmnt
3:58 PM 6/7/2022
Team member Jeffery Hemphill


package org.launchcode.techjobs_oo.tests;

import org.junit.Before;
import org.junit.Test;
import org.launchcode.techjobs_oo.*;
import static org.junit.Assert.*;

public class JobTest {

    // Declared Job objects
    Job test_job1;
    Job test_job2;
    Job test_job3;
    Job test_job4;
    Employer employer;
    Location location;
    PositionType positionType;
    CoreCompetency coreCompetency;
    Integer difference;
    String output;
    String toStringFirstTestOne;
    String toStringFirstTestTwo;

    @Before
    public void createJobObj() {

        // Initialized job objects
        test_job1 = new Job(
                "Product tester",
                employer = new Employer("ACME"),
                location = new Location("Desert"),
                positionType = new PositionType("Quality control"),
                coreCompetency = new CoreCompetency("Persistence")
        );
        test_job2 = new Job(
                "Job Test2",
                employer = new Employer("ACME"),
                location = new Location("Desert"),
                positionType = new PositionType("Quality control"),
                coreCompetency = new CoreCompetency("Persistence")
        );
        test_job3 = new Job(
                "Product tester",
                employer = new Employer("ACME"),
                location = new Location("Desert"),
                positionType = new PositionType("Quality control"),
                coreCompetency = new CoreCompetency("Persistence")
        );
        test_job4 = new Job(
                "",
                new Employer(""),
                new Location(""),
                new PositionType(""),
                new CoreCompetency("")
        );
    }

    @Test
    public void emptyTest() {
        assertEquals(1, 1, .001);
    }

    // Test the Empty Constructor
    @Test
    public void testSettingJobId() {
        test_job1.getId();
        assertTrue(test_job1.getId() != test_job2.getId());

        test_job2.getId();
        difference = test_job1.getId() - test_job2.getId();
        assertTrue(difference == -1);
    }

    // Test the Full Constructor
    @Test
    public void testJobConstructorSetsAllFields() {
        assertTrue(test_job3 instanceof Job);
        assertEquals(test_job3.getName(), "Product tester");
        assertEquals(test_job3.getEmployer(), employer);
        assertEquals(test_job3.getLocation(), location);
        assertEquals(test_job3.getPositionType(), positionType);
        assertEquals(test_job3.getCoreCompetency(), coreCompetency);
    }

    // Test the equals Method
    @Test
    public void testJobsForEquality() {
        assertFalse(test_job1.equals(test_job3));
    }

    @Test
    public void testJobToStringNewlines() {
        output = test_job3.toString();
        assertTrue(output.startsWith("\n"));
        assertTrue(output.endsWith("\n"));
    }

    // Created First Test for toString
    @Test
    public void testFirstToStringOne() {
        toStringFirstTestOne = "" + "\n" +
                "ID: " + test_job3.getId() + "\n" +
                "Name: " + test_job3.getName() + "\n" +
                "Employer: " + test_job3.getEmployer() + "\n" +
                "Location: " + test_job3.getLocation() + "\n" +
                "Position Type: " + test_job3.getPositionType() + "\n" +
                "Core Competency: " + test_job3.getCoreCompetency() + "\n" +
                "";

        assertEquals(toStringFirstTestOne, test_job3.toString());
        ;
    }

    @Test
    public void testFirstToStringTwo() {
        toStringFirstTestTwo = "" + "\n" +
                "ID: " + test_job4.getId() + "\n" +
                "Name: " + "Data not available" + "\n" +
                "Employer: " + "Data not available" + "\n" +
                "Location: " + "Data not available" + "\n" +
                "Position Type: " + "Data not available" + "\n" +
                "Core Competency: " + "Data not available" + "\n" +
                "";
        assertEquals(toStringFirstTestTwo, test_job4.toString());
    }
}
...........=..............
1aJobTestRUNpassedAllTests
C:\Users\h19sl\Documents\asgnment2LC2022may12\extraFiles2asgnmnt\extrsFilesIMgasgnmnt2
............-..................
Main.java



package org.launchcode.techjobs_oo;

import org.launchcode.techjobs_oo.*;

import java.util.ArrayList;


public class Main {

    public static void main(String[] args) {

        Job job1 = new Job("Product tester", new Employer("ACME"), new Location("Desert"), new PositionType("Quality control"), new CoreCompetency("Persistence"));
        Job job2 = new Job("Web Developer", new Employer("LaunchCode"), new Location("St. Louis"), new PositionType("Front-end developer"), new CoreCompetency("JavaScript"));
        Job job3 = new Job("Ice cream taster", new Employer(""), new Location("Home"), new PositionType("UX"), new CoreCompetency("Taste"));

        ArrayList<Job> jobs = new ArrayList<>();
        jobs.add(job1);
        jobs.add(job2);
        jobs.add(job3);

        for (Job job : jobs) {
            System.out.println(job);
        }
        //System.out.println("This is IMP submitted URL clone to my local gitbash");
    }
}


.............=...............
C:\Users\h19sl\.jdks\corretto-11.0.15\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.3\lib\idea_rt.jar=55956:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\h19sl\Documents\asgnment2LC2022may12\out\production\Java-web-dev-techjobs-oo;C:\Users\h19sl\.m2\repository\junit\junit\4.13.1\junit-4.13.1.jar;C:\Users\h19sl\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar org.launchcode.techjobs_oo.Main

ID: 1
Name: Product tester
Employer: ACME
Location: Desert
Position Type: Quality control
Core Competency: Persistence


ID: 2
Name: Web Developer
Employer: LaunchCode
Location: St. Louis
Position Type: Front-end developer
Core Competency: JavaScript


ID: 3
Name: Ice cream taster
Employer: Data not available
Location: Home
Position Type: UX
Core Competency: Taste


Process finished with exit code 0
........................-..............

package org.launchcode.techjobs_oo;

import java.util.Objects;

public class CoreCompetency extends JobField {
    public CoreCompetency (String value) {
        super(value);
    }
}

.......-..................
package org.launchcode.techjobs_oo;
import java.util.Objects;
public class Employer  extends JobField{
    public Employer(String value) {
        super(value);
    }
}


............-............
package org.launchcode.techjobs_oo;

import java.util.Objects;

public class Job {

    private int id;
    private static int nextId = 1;

    private String name;
    private Employer employer;
    private Location location;
    private PositionType positionType;
    private CoreCompetency coreCompetency;


    // TODO: Add two constructors - one to initialize a unique ID and a second to
    //  initialize the  other five fields. The second constructor should also call
    //  the first in order to initialize  the 'id' field.
    public Job() {
        id = nextId;
        nextId++;
    }

    public Job(String name, Employer employer, Location location, PositionType positionType, CoreCompetency coreCompetency) {
        this();
        this.name = name;
        this.employer = employer;
        this.location = location;
        this.positionType = positionType;
        this.coreCompetency = coreCompetency;

    }//end of constructor Job with arguments

    //toString() method Step 5 in asgnmt2 instructions
    @Override
    public String toString() {

        // created a toString method that passes the first test.
        // Since the test only checks if the returned string starts
        // and ends with a blank line, make that happen.
        String labelsAndFields = "" + "\n" +
                "ID: " + this.getId() + "\n";

        if (this.getName().equals("")) {
            labelsAndFields += "Name: " + "Data not available\n";
        } else {
            labelsAndFields += "Name: " + this.getName() + "\n";
        }

        if (this.getEmployer().equals(null) || this.employer.getValue().equals("")) {
            labelsAndFields += "Employer: " + "Data not available\n";
        } else {
            labelsAndFields += "Employer: " + this.getEmployer() + "\n";
        }

        if (this.getLocation().equals(null) || this.location.getValue().equals("")) {
            labelsAndFields += "Location: " + "Data not available\n";
        } else {
            labelsAndFields += "Location: " + this.getLocation() + "\n";
        }

        if (this.getPositionType().equals(null) || this.positionType.getValue().equals("")) {
            labelsAndFields += "Position Type: " + "Data not available\n";
        } else {
            labelsAndFields += "Position Type: " + this.getPositionType() + "\n";
        }

        if (this.getCoreCompetency().equals(null) || this.coreCompetency.getValue().equals("")) {
            labelsAndFields += "Core Competency: " + "Data not available\n";
        } else {
            labelsAndFields += "Core Competency: " + this.getCoreCompetency() + "\n";
        }

        return labelsAndFields;

    }




    // TODO: Add custom equals and hashCode methods. Consider two Job objects "equal"
    //  when their id fields   match.
    @Override
    public boolean equals(Object o) {  // Two objects are equal if they have the same id.
        if (this == o) return true;
        if (!(o instanceof Job)) return false;
        Job job = (Job) o;
        return getId() == job.getId();
    }


    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }


    // TODO: Add getters for each field EXCEPT nextId. Add setters for each field
    //  EXCEPT nextID   and id.


    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Employer getEmployer() {
        return employer;
    }

    public void setEmployer(Employer employer) {
        this.employer = employer;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public PositionType getPositionType() {
        return positionType;
    }

    public void setPositionType(PositionType positionType) {
        this.positionType = positionType;
    }

    public CoreCompetency getCoreCompetency() {
        return coreCompetency;
    }

    public void setCoreCompetency(CoreCompetency coreCompetency) {
        this.coreCompetency = coreCompetency;
    }
}
......................-.................
package org.launchcode.techjobs_oo;

import java.util.Objects;

public abstract class JobField {
    // Created common fields
    protected int id;
    protected static int nextId = 1;
    protected String value;

    // Created common constructors
    public JobField() {
        id = nextId;
        nextId++;
    }

    public JobField(String value) {
        this();
        this.value = value;
    }

    // Created common methods
    @Override
    public String toString() {
        return value;
    }

    @Override
    public boolean equals(Object o) {  // Two objects are equal if they have the same id.
        if (this == o) return true;
        if (!(o instanceof JobField)) return false;
        JobField jobField = (JobField) o;
        return getId() == jobField.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }


    public int getId() {
        return id;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }
}


.............-................

package org.launchcode.techjobs_oo;

import java.util.Objects;

public class Location extends JobField {
    public Location (String value) {
        super(value);
    }
}

..............-................
package org.launchcode.techjobs_oo;

import java.util.Objects;

public class PositionType extends JobField {
    public PositionType (String value) {
        super(value);
    }
}
.......-.................









============++++++====================
